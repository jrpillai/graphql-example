import type { IntValueNode, FloatValueNode, StringValueNode, BooleanValueNode, EnumValueNode, OperationDefinitionNode, VariableDefinitionNode, FieldNode, FragmentSpreadNode, InlineFragmentNode, FragmentDefinitionNode, SchemaDefinitionNode, ScalarTypeDefinitionNode, ObjectTypeDefinitionNode, FieldDefinitionNode, InputValueDefinitionNode, InterfaceTypeDefinitionNode, UnionTypeDefinitionNode, EnumTypeDefinitionNode, EnumValueDefinitionNode, InputObjectTypeDefinitionNode, SchemaExtensionNode, ScalarTypeExtensionNode, ObjectTypeExtensionNode, InterfaceTypeExtensionNode, UnionTypeExtensionNode, EnumTypeExtensionNode, InputObjectTypeExtensionNode } from 'graphql';
export interface ProtoObjType {
    [key: string]: string | boolean | null | ProtoObjType;
}
export interface FragsType {
    [fragName: string]: {
        [fieldName: string]: boolean;
    };
}
export interface ArgsObjType {
    [fieldName: string]: string | boolean | null;
}
export interface FieldArgsType {
    [fieldName: string]: AuxObjType;
}
export interface AuxObjType {
    __type?: string | boolean | null;
    __alias?: string | boolean | null;
    __args?: ArgsObjType | null;
    __id?: string | boolean | null;
}
export type GQLNodeWithDirectivesType = OperationDefinitionNode | VariableDefinitionNode | FieldNode | FragmentSpreadNode | InlineFragmentNode | FragmentDefinitionNode | SchemaDefinitionNode | ScalarTypeDefinitionNode | ObjectTypeDefinitionNode | FieldDefinitionNode | InputValueDefinitionNode | InterfaceTypeDefinitionNode | UnionTypeDefinitionNode | EnumTypeDefinitionNode | EnumValueDefinitionNode | InputObjectTypeDefinitionNode | SchemaExtensionNode | ScalarTypeExtensionNode | ObjectTypeExtensionNode | InterfaceTypeExtensionNode | UnionTypeExtensionNode | EnumTypeExtensionNode | InputObjectTypeExtensionNode;
export type ValidArgumentNodeType = IntValueNode | FloatValueNode | StringValueNode | BooleanValueNode | EnumValueNode;
export interface FieldsValuesType {
    [fieldName: string]: boolean;
}
export interface FieldsObjectType {
    [fieldName: string]: string | boolean | null | ArgsObjType;
}
export interface CostParamsType {
    [key: string]: number | undefined;
    maxCost: number;
    mutationCost?: number;
    objectCost?: number;
    scalarCost?: number;
    depthCostFactor?: number;
    maxDepth: number;
    ipRate: number;
}
export interface MapCacheType {
    data: JSONObject;
    fieldNames: string[];
}
export interface FetchObjType {
    method?: string;
    headers: {
        'Content-Type': string;
    };
    body: string;
}
export interface JSONObject {
    [k: string]: JSONValue;
}
export interface JSONObjectWithId {
    id?: string;
}
export type JSONValue = JSONObject | JSONArray | JSONPrimitive;
type JSONPrimitive = number | string | boolean | null;
type JSONArray = JSONValue[];
export type ClientErrorType = {
    log: string;
    status: number;
    message: {
        err: string;
    };
};
export type QueryResponse = {
    queryResponse: {
        data: JSONObject;
    };
};
export {};
